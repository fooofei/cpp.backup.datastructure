#define LIST_INIT_SIZE 10 /* 线性表存储空间的初始分配量 */
#define LISTINCREMENT 2   /* 线性表存储空间的分配增量 */


typedef struct
{
	int *elem; /* 存储空间基址 */
	int length; /* 当前长度 */
	int listsize; /* 当前分配的存储容量(以sizeof(ElemType)为单位) */
 }SqList;


 /* 操作结果：构造一个空的顺序线性表 */
bool InitList(SqList* L);

/* 初始条件：顺序线性表L已存在。操作结果：销毁顺序线性表L */
bool DestroyList(SqList* L);


/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */
bool ClearList(SqList* L);

/* 初始条件：顺序线性表L已存在。操作结果：若L为空表，则返回TRUE，否则返回FALSE */
bool ListEmpty(SqList L);


/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */
/* 操作结果：用e返回L中第i个数据元素的值 */
bool GetElem(SqList L,int i,int* e);


 /* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */
int ListLength(SqList L);



/* 操作结果：返回L中第1个与e满足关系compare()的数据元素的位序。 */
/*           若这样的数据元素不存在，则返回值为0 */
int LocateElem(SqList L,int e, bool (*Compare)(int a,int b));




/* 操作结果：若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱， */
/*           否则操作失败，pre_e无定义 */
bool PriorElem(SqList L,int cur_e,int* pre_e);



/* 操作结果：若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的后继， */
/*           否则操作失败，next_e无定义 */

bool NextElem(SqList L,int cur_e,int* next_e);



/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L)+1 */
/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */
bool ListInsert(SqList* L,int i,int e);



/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */
/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */
bool ListDelete(SqList* L,int i,int* e);


/* 初始条件：顺序线性表L已存在 */
/* 操作结果：依次对L的每个数据元素调用函数vi()。一旦vi()失败，则操作失败 */
/*           vi()的形参加'&'，表明可通过调用vi()改变元素的值 */


bool ListTravel(SqList L,void(*vi)(int*));